import torch  
import torch.nn as nn  
import torch.nn.functional as F  
import numpy as np  
import matplotlib.pyplot as plt  
from sklearn.model_selection import KFold  
from sklearn.preprocessing import StandardScaler  

class OptionPricingNet(nn.Module):  
    def __init__(self, hidden_size=16):  
        super().__init__()  
        self.layer1 = nn.Linear(5, hidden_size)  
        self.bn1 = nn.BatchNorm1d(hidden_size)  
        self.layer2 = nn.Linear(hidden_size, hidden_size)  
        self.bn2 = nn.BatchNorm1d(hidden_size)  
        self.layer3 = nn.Linear(hidden_size, hidden_size)  
        self.bn3 = nn.BatchNorm1d(hidden_size)  
        self.output = nn.Linear(hidden_size, 1)  
        
        # 减小dropout率  
        self.dropout = nn.Dropout(0.1)  
        
    def forward(self, x):  
        x = F.relu(self.bn1(self.layer1(x)))  
        x = self.dropout(x)  
        x = F.relu(self.bn2(self.layer2(x)))  
        x = self.dropout(x)  
        x = F.relu(self.bn3(self.layer3(x)))  
        x = self.dropout(x)  
        return self.output(x)  

def generate_synthetic_data(n_samples=1000):  
    """生成更真实的合成数据"""  
    np.random.seed(42)  
    
    # 基础参数  
    S = np.random.uniform(80, 120, n_samples)  # 股票价格  
    K = np.random.uniform(90, 110, n_samples)  # 行权价  
    T = np.random.uniform(0.1, 1.0, n_samples)  # 到期时间  
    r = 0.05 * np.ones(n_samples)  # 无风险利率  
    sigma = 0.2 * np.ones(n_samples)  # 波动率  
    
    # 计算BS价格  
    d1 = (np.log(S/K) + (r + 0.5*sigma**2)*T) / (sigma*np.sqrt(T))  
    d2 = d1 - sigma*np.sqrt(T)  
    
    # 添加随机噪声  
    noise = np.random.normal(0, 0.1, n_samples)  
    V = S*norm.cdf(d1) - K*np.exp(-r*T)*norm.cdf(d2) + noise  
    
    # 组合特征  
    X = np.column_stack((S, K, T, r, sigma))  
    y = V.reshape(-1, 1)  
    
    return X, y  

def k_fold_cross_validation(X, y, k=5, epochs=500, batch_size=128, lr=0.001):  
    """实现K折交叉验证"""  
    kf = KFold(n_splits=k, shuffle=True, random_state=42)  
    fold_results = []  
    
    for fold, (train_idx, val_idx) in enumerate(kf.split(X)):  
        print(f"\nFold {fold+1}/{k}")  
        
        # 数据准备  
        X_train, X_val = X[train_idx], X[val_idx]  
        y_train, y_val = y[train_idx], y[val_idx]  
        
        # 标准化  
        scaler_X = StandardScaler()  
        scaler_y = StandardScaler()  
        
        X_train = scaler_X.fit_transform(X_train)  
        X_val = scaler_X.transform(X_val)  
        y_train = scaler_y.fit_transform(y_train)  
        y_val = scaler_y.transform(y_val)  
        
        # 转换为tensor  
        X_train = torch.FloatTensor(X_train)  
        y_train = torch.FloatTensor(y_train)  
        X_val = torch.FloatTensor(X_val)  
        y_val = torch.FloatTensor(y_val)  
        
        # 创建模型  
        model = OptionPricingNet()  
        optimizer = torch.optim.Adam(model.parameters(), lr=lr)  
        criterion = nn.MSELoss()  
        
        # 创建数据加载器  
        train_loader = torch.utils.data.DataLoader(  
            torch.utils.data.TensorDataset(X_train, y_train),  
            batch_size=batch_size, shuffle=True  
        )  
        
        train_losses = []  
        val_losses = []  
        
        for epoch in range(epochs):  
            # 训练  
            model.train()  
            train_loss = 0  
            for batch_X, batch_y in train_loader:  
                optimizer.zero_grad()  
                output = model(batch_X)  
                loss = criterion(output, batch_y)  
                loss.backward()  
                optimizer.step()  
                train_loss += loss.item()  
            
            train_loss /= len(train_loader)  
            
            # 验证  
            model.eval()  
            with torch.no_grad():  
                val_output = model(X_val)  
                val_loss = criterion(val_output, y_val).item()  
            
            train_losses.append(train_loss)  
            val_losses.append(val_loss)  
            
            if (epoch + 1) % 100 == 0:  
                print(f'Epoch [{epoch+1}/{epochs}], Train Loss: {train_loss:.6f}, Val Loss: {val_loss:.6f}')  
        
        fold_results.append({  
            'train_losses': train_losses,  
            'val_losses': val_losses,  
            'final_train_loss': train_losses[-1],  
            'final_val_loss': val_losses[-1]  
        })  
    
    return fold_results  

def plot_k_fold_results(fold_results):  
    """绘制K折交叉验证结果"""  
    plt.figure(figsize=(15, 10))  
    
    # 损失曲线  
    plt.subplot(2, 1, 1)  
    for i, result in enumerate(fold_results):  
        plt.plot(result['train_losses'], label=f'Fold {i+1} Train')  
        plt.plot(result['val_losses'], '--', label=f'Fold {i+1} Val')  
    plt.xlabel('Epoch')  
    plt.ylabel('Loss')  
    plt.title('Training and Validation Losses Across Folds')  
    plt.legend()  
    plt.grid(True)  
    
    # 最终损失对比  
    plt.subplot(2, 1, 2)  
    train_losses = [r['final_train_loss'] for r in fold_results]  
    val_losses = [r['final_val_loss'] for r in fold_results]  
    
    plt.boxplot([train_losses, val_losses], labels=['Train Loss', 'Val Loss'])  
    plt.title('Final Loss Distribution Across Folds')  
    plt.grid(True)  
    
    plt.tight_layout()  
    plt.show()  
    
    # 打印统计信息  
    print("\nLoss Statistics:")  
    print(f"Train Loss: mean={np.mean(train_losses):.6f}, std={np.std(train_losses):.6f}")  
    print(f"Val Loss: mean={np.mean(val_losses):.6f}, std={np.std(val_losses):.6f}")  

def main():  
    # 生成数据  
    print("Generating data...")  
    X, y = generate_synthetic_data(n_samples=2000)  
    
    # 进行k折交叉验证  
    print("Starting k-fold cross validation...")  
    fold_results = k_fold_cross_validation(X, y, k=5)  
    
    # 绘制结果  
    print("Plotting results...")  
    plot_k_fold_results(fold_results)  

if __name__ == "__main__":  
    main()
