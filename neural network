import torch  
import torch.nn as nn  
import numpy as np  
import matplotlib.pyplot as plt  
from torch.utils.data import DataLoader, TensorDataset  

# 定义神经网络结构  
class OptionPricingNet(nn.Module):  
    def __init__(self):  
        super(OptionPricingNet, self).__init__()  
        self.layer1 = nn.Linear(2, 6)  # 2输入：S和t  
        self.activation = nn.ReLU()     # ReLU激活函数  
        self.layer2 = nn.Linear(6, 1)   # 1输出：V(S,t)  
        
    def forward(self, x):  
        x = self.layer1(x)  
        x = self.activation(x)  
        x = self.layer2(x)  
        return x  

# 生成模拟数据  
def generate_option_data(n_samples=1000):  
    # 参数设置  
    S = np.random.uniform(80, 120, n_samples)  # 股票价格  
    t = np.random.uniform(0, 1, n_samples)     # 到期时间  
    K = 100  # 执行价格  
    r = 0.05 # 无风险利率  
    sigma = 0.2 # 波动率  
    
    # 计算Black-Scholes价格（简化版本）  
    d1 = (np.log(S/K) + (r + 0.5*sigma**2)*t) / (sigma*np.sqrt(t))  
    d2 = d1 - sigma*np.sqrt(t)  
    
    from scipy.stats import norm  
    V = S*norm.cdf(d1) - K*np.exp(-r*t)*norm.cdf(d2)  
    
    # 转换为PyTorch张量  
    X = torch.FloatTensor(np.column_stack((S, t)))  
    y = torch.FloatTensor(V).reshape(-1, 1)  
    
    return X, y  

# 训练函数  
def train_model(model, X, y, epochs=1000, batch_size=32):  
    criterion = nn.MSELoss()  
    optimizer = torch.optim.Adam(model.parameters(), lr=0.01)  
    
    dataset = TensorDataset(X, y)  
    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)  
    
    losses = []  
    
    for epoch in range(epochs):  
        epoch_loss = 0  
        for batch_X, batch_y in dataloader:  
            optimizer.zero_grad()  
            outputs = model(batch_X)  
            loss = criterion(outputs, batch_y)  
            loss.backward()  
            optimizer.step()  
            epoch_loss += loss.item()  
            
        epoch_loss /= len(dataloader)  
        losses.append(epoch_loss)  
        
        if (epoch + 1) % 100 == 0:  
            print(f'Epoch [{epoch+1}/{epochs}], Loss: {epoch_loss:.6f}')  
    
    return losses  

# 主函数  
def main():  
    # 生成数据  
    X, y = generate_option_data()  
    
    # 创建模型  
    model = OptionPricingNet()  
    
    # 训练模型  
    losses = train_model(model, X, y)  
    
    # 绘制损失曲线  
    plt.figure(figsize=(10, 6))  
    plt.plot(losses)  
    plt.xlabel('Epoch')  
    plt.ylabel('Loss')  
    plt.title('Training Loss over Time')  
    plt.show()  
    
    # 测试模型  
    model.eval()  
    with torch.no_grad():  
        test_S = torch.linspace(80, 120, 100).reshape(-1, 1)  
        test_t = torch.ones_like(test_S) * 0.5  
        test_X = torch.cat((test_S, test_t), dim=1)  
        predicted_prices = model(test_X)  
        
        plt.figure(figsize=(10, 6))  
        plt.plot(test_S.numpy(), predicted_prices.numpy(), label='Predicted')  
        # 计算实际Black-Scholes价格用于比较  
        K = 100  
        r = 0.05  
        sigma = 0.2  
        t = 0.5  
        d1 = (np.log(test_S.numpy()/K) + (r + 0.5*sigma**2)*t) / (sigma*np.sqrt(t))  
        d2 = d1 - sigma*np.sqrt(t)  
        actual_prices = test_S.numpy()*norm.cdf(d1) - K*np.exp(-r*t)*norm.cdf(d2)  
        plt.plot(test_S.numpy(), actual_prices, '--', label='Actual')  
        plt.xlabel('Stock Price')  
        plt.ylabel('Option Price')  
        plt.title('Option Price vs Stock Price (t=0.5)')  
        plt.legend()  
        plt.show()  

if __name__ == "__main__":  
    main()
